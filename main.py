import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
import pyttsx3
import random
import matplotlib.pyplot as plt

logging.basicConfig(level=logging.INFO)

EXIT_STICKER_FILE_ID = "CAACAgIAAxkBAAEOec5oJEnpPl_g4bf0eBnsOCVf8AzwEwACGwADXQWCFnr-E0IuatztNgQ"
MENU_HELP = "–ü–æ–º–æ—â—å"
MENU_EXIT = "–í—ã—Ö–æ–¥"

CITIES = {
    "–º–æ—Å–∫–≤–∞": (55.75, 37.61),
    "—Å–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": (59.93, 30.31),
    "–±—Ä–∞—Ç—Å–∫": (56.15, 101.63),
    "–∫–∏–µ–≤": (50.45, 30.52),
    "–º–∏–Ω—Å–∫": (53.90, 27.56),
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": (55.03, 82.92)
}


def get_weather(city):
    city = city.lower().strip()

    if city not in CITIES:
        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

    latitude, longitude = CITIES[city]
    url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min,precipitation_sum"

    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as err:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {err}")
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"}


def format_weather(data):
    if "error" in data:
        return data["error"]

    current_weather = ""  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ current –Ω–µ—Ç
    reaction = ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
    if "current" in data:
        temp_now = data["current"]["temperature_2m"]
        wind_now = data["current"]["wind_speed_10m"]
        current_weather = f"üåç **–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:**\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_now}¬∞C\nüí® –í–µ—Ç–µ—Ä: {wind_now} –º/—Å\n\n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ–≥–æ–¥—É
        if temp_now >= 25:
            reaction = random.choice(WEATHER_REPLIES["hot"])
        elif temp_now <= 5:
            reaction = random.choice(WEATHER_REPLIES["cold"])
        elif wind_now > 10:
            reaction = random.choice(WEATHER_REPLIES["windy"])
        else:
            reaction = random.choice(WEATHER_REPLIES["normal"])

    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
    forecast_text = ""
    if "daily" in data:
        temp_max = data["daily"]["temperature_2m_max"][:7]
        temp_min = data["daily"]["temperature_2m_min"][:7]
        rain = data["daily"]["precipitation_sum"][:7]
        dates = data["daily"]["time"][:7]

        forecast_text = "üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n"
        for i in range(7):
            forecast_text += f"{dates[i]}: üå° {temp_min[i]}¬∞C - {temp_max[i]}¬∞C, ‚òî –û—Å–∞–¥–∫–∏: {rain[i]} –º–º\n"

    return f"{current_weather}{reaction}\n\n{forecast_text}"


WEATHER_REPLIES = {
    "hot": [
        "–ñ–∞—Ä–∫–æ–≤–∞—Ç–æ! –ü–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –ø–ª–∞–≤–∫–∏ –∏ –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –±–∞—Å—Å–µ–π–Ω! üèñ",
        "–°–æ–ª–Ω—Ü–µ –∂–∂–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—à–∫—É-—Ñ—Ä–∏. üåû",
        "–ù–∞—Å—Ç–æ—è—â–∞—è –¥—É—Ö–æ—Ç–∞! –ú–æ–∂–µ—Ç, –ª—É—á—à–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ? ‚ùÑÔ∏è"
    ],
    "cold": [
        "–•–æ–ª–æ–¥–Ω–æ, –∫–∞–∫ –≤ —Å–µ—Ä–¥—Ü–µ —Ç–≤–æ–µ–≥–æ –±—ã–≤—à–µ–≥–æ! üßä",
        "–ú–∏–Ω—É—Å –Ω–∞ —É–ª–∏—Ü–µ, –ø–ª—é—Å –∫ –∂–µ–ª–∞–Ω–∏—é —Å–∏–¥–µ—Ç—å –¥–æ–º–∞ –ø–æ–¥ –ø–ª–µ–¥–æ–º! ü•∂",
        "–ì–¥–µ —Ç–≤–æ–π —Ç–µ–ø–ª—ã–π —á–∞–π –∏ —Ç–æ–ª—Å—Ç—ã–π —Å–≤–∏—Ç–µ—Ä? –°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è! üçµ"
    ],
    "windy": [
        "–í–µ—Ç–µ—Ä —Ç–∞–∫–æ–π, —á—Ç–æ –º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏—Å–ø—ã—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞—à—é—Ç–∞! üí®",
        "–ü–æ—Ä–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å —à–∞–ø–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —É–ª–µ—Ç–µ–ª–∞ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥! üé©",
        "–•–æ—á–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —É–∫–ª–∞–¥–∫—É? –ü—Ä–æ—Å—Ç–æ –≤—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É! üå™"
    ],
    "normal": [
        "–ü–æ–≥–æ–¥–∞ –≤—Ä–æ–¥–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è! –ú–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –≥—É–ª—è—Ç—å. üòé",
        "–°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è –æ –ø–æ–≥–æ–¥–µ! üòè",
        "–í—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ! –î–∞–∂–µ —Å–∏–Ω–æ–ø—Ç–∏–∫–∏ –Ω–µ –∂–∞–ª—É—é—Ç—Å—è. üòÜ"
    ]
}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text.lower() == MENU_HELP.lower():
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –ª–∏–±–æ —Å–∫–∞–∂–∏ –µ–≥–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")
    elif text == MENU_EXIT:
        await update.message.reply_text("–ù—É –∏ –ø–æ—à–µ–ª –Ω–∞—Ö—É–π!", reply_markup=ReplyKeyboardRemove())
        await update.message.reply_sticker(sticker=EXIT_STICKER_FILE_ID)
    else:
        weather_data = get_weather(text)
        await update.message.reply_text(format_weather(weather_data))


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.voice.get_file()
    file_path = "voice.ogg"
    await file.download_to_drive(file_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav
    os.system(f"ffmpeg -y -i {file_path} -ar 16000 -ac 1 voice.wav")

    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
    recognizer = sr.Recognizer()
    with sr.AudioFile("voice.wav") as source:
        audio = recognizer.record(source)

    try:
        text = recognizer.recognize_google(audio, language="ru-RU")
        weather_data = get_weather(text)
        await update.message.reply_text(format_weather(weather_data))
    except sr.UnknownValueError:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    except sr.RequestError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    os.remove("voice.ogg")
    os.remove("voice.wav")


def build_menu_keyboard():
    keyboard = [[MENU_HELP], [MENU_EXIT]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∞—Ä–æ–≤–∞! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ—Ç—ã–∫–∞–π –∫–Ω–æ–ø–∫–∏.",
                                    reply_markup=build_menu_keyboard())


def main():
    application = Application.builder().token(os.getenv('Telegram_bot_token')).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == '__main__':
    main()
