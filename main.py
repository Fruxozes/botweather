import os
import logging
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()
TELEGRAM_TOKEN = os.getenv('Telegram_bot_token')
API_KEY = os.getenv("API_KEY")

logging.basicConfig(level=logging.INFO)

EXIT_STICKER_FILE_ID = "CAACAgIAAxkBAAEOec5oJEnpPl_g4bf0eBnsOCVf8AzwEwACGwADXQWCFnr-E0IuatztNgQ"
MENU_HELP = "–ü–æ–º–æ—â—å"
MENU_EXIT = "–í—ã—Ö–æ–¥"
git add .
git commit -m "–ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç"
def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"

    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as err:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {err}")
        return None


def format_weather(data):
    if data:
        city = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        temp = data["main"]["temp"]
        weather = data["weather"][0]["description"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]

        return f"üåç –ì–æ—Ä–æ–¥: {city}\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."


def build_menu_keyboard():
    keyboard = [[MENU_HELP], [MENU_EXIT]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text.strip().lower() == MENU_HELP.lower():
        await update.message.reply_text("–¢–µ–±–µ —É–∂–µ –Ω–∏—á–µ–º –Ω–µ –ø–æ–º–æ—á—å –±–ª—è—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–∏ –ª—É—á—à–µ –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–µ–±–∞—Ç–∞—è.")
    elif text == MENU_EXIT:
        await update.message.reply_text("–ù—É –∏ –ø–æ—à–µ–ª –Ω–∞—Ö—É–π –æ—Ç —Å—é–¥–∞!", reply_markup=ReplyKeyboardRemove())
        await update.message.reply_sticker(sticker=EXIT_STICKER_FILE_ID)
    else:
        weather_data = get_weather(text)
        await update.message.reply_text(format_weather(weather_data))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∞—Ä–æ–≤–∞, –ø–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–≥–æ–¥—É (–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞) –ª–∏–±–æ –ø–æ—Ç—ã–∫–∞–π –∫–Ω–æ–ø–∫–∏.",
                                    reply_markup=build_menu_keyboard())


def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == '__main__':
    main()
